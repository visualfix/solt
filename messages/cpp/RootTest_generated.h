// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ROOTTEST_H_
#define FLATBUFFERS_GENERATED_ROOTTEST_H_

#include "flatbuffers/flatbuffers.h"

#include "Vec3_generated.h"

struct RootTest;
struct RootTestBuilder;

struct RootTest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RootTestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_MANA = 6,
    VT_HP = 8
  };
  const Vec3 *pos() const {
    return GetStruct<const Vec3 *>(VT_POS);
  }
  int16_t mana() const {
    return GetField<int16_t>(VT_MANA, 150);
  }
  int16_t hp() const {
    return GetField<int16_t>(VT_HP, 100);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vec3>(verifier, VT_POS) &&
           VerifyField<int16_t>(verifier, VT_MANA) &&
           VerifyField<int16_t>(verifier, VT_HP) &&
           verifier.EndTable();
  }
};

struct RootTestBuilder {
  typedef RootTest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const Vec3 *pos) {
    fbb_.AddStruct(RootTest::VT_POS, pos);
  }
  void add_mana(int16_t mana) {
    fbb_.AddElement<int16_t>(RootTest::VT_MANA, mana, 150);
  }
  void add_hp(int16_t hp) {
    fbb_.AddElement<int16_t>(RootTest::VT_HP, hp, 100);
  }
  explicit RootTestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RootTest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RootTest>(end);
    return o;
  }
};

inline flatbuffers::Offset<RootTest> CreateRootTest(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3 *pos = nullptr,
    int16_t mana = 150,
    int16_t hp = 100) {
  RootTestBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_mana(mana);
  return builder_.Finish();
}

inline const RootTest *GetRootTest(const void *buf) {
  return flatbuffers::GetRoot<RootTest>(buf);
}

inline const RootTest *GetSizePrefixedRootTest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<RootTest>(buf);
}

inline bool VerifyRootTestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RootTest>(nullptr);
}

inline bool VerifySizePrefixedRootTestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RootTest>(nullptr);
}

inline void FinishRootTestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RootTest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRootTestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RootTest> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_ROOTTEST_H_
